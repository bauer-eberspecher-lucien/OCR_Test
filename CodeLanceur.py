"""
###LIGNE 246 POUR LANGUE ET LIGNE 207 POUR CHEMIN D'ACCES A L'IMAGE###
Script de test pour le syst√®me OCR Enhanced
Test sp√©cifique pour le fichier lorem ipsum
Version mise √† jour pour CodeSourceOCR_EN_FR.py - CORRIG√âE
"""

import sys
import os
from pathlib import Path

"""
SOLUTION RAPIDE POPPLER - √Ä ajouter au d√©but de votre script OCR
"""

import os
import sys

def fix_poppler_path():
    """
    Correction automatique du PATH Poppler pour la session Python actuelle
    """
    # Chemins possibles pour Poppler (ajustez selon votre installation)
    possible_paths = [
        r"C:\Users\bauer\Downloads\Release-24.08.0-0 (1)\poppler-24.08.0\Library\bin",
        r"C:\Users\bauer\Downloads\Release-24.08.0-0 (1)\poppler-24.08.0\bin",
        r"C:\poppler\bin",
        r"C:\Program Files\poppler\bin",
        r"C:\poppler-24.08.0\bin"
    ]
    
    # Trouver le bon chemin
    poppler_path = None
    for path in possible_paths:
        if os.path.exists(path) and os.path.exists(os.path.join(path, 'pdfinfo.exe')):
            poppler_path = path
            print(f"üìÅ Poppler trouv√©: {poppler_path}")
            break
    
    if not poppler_path:
        print("‚ùå Erreur: Aucun dossier Poppler valide trouv√©")
        print("Chemins v√©rifi√©s:")
        for path in possible_paths:
            print(f"   - {path}")
        return False
    
    # V√©rifier que les fichiers essentiels sont pr√©sents
    required_files = ['pdfinfo.exe', 'pdftoppm.exe']
    for file in required_files:
        if not os.path.exists(os.path.join(poppler_path, file)):
            print(f"‚ùå Erreur: {file} manquant dans {poppler_path}")
            return False
    
    # Ajouter au PATH de la session actuelle
    current_path = os.environ.get('PATH', '')
    if poppler_path not in current_path:
        os.environ['PATH'] = poppler_path + os.pathsep + current_path
        print(f"‚úÖ Poppler ajout√© au PATH: {poppler_path}")
    else:
        print(f"‚úÖ Poppler d√©j√† dans le PATH")
    
    return True

def test_poppler():
    """
    Test pour v√©rifier que Poppler fonctionne
    """
    import subprocess
    try:
        result = subprocess.run(['pdfinfo', '-v'], 
                               capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ Poppler fonctionne! Version: {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå Erreur Poppler: {result.stderr}")
            return False
    except FileNotFoundError:
        print("‚ùå pdfinfo introuvable - PATH non configur√©")
        return False
    except Exception as e:
        print(f"‚ùå Erreur test Poppler: {e}")
        return False

# Configuration initiale Poppler
print("üîß Configuration Poppler...")
if fix_poppler_path():
    if test_poppler():
        print("üéâ Poppler configur√© avec succ√®s!")
    else:
        print("‚ö†Ô∏è Poppler partiellement configur√©")
else:
    print("‚ö†Ô∏è Configuration Poppler √©chou√©e")

# Import du nouveau syst√®me OCR Enhanced - CORRIG√â
try:
    # Import depuis le nouveau fichier CodeSourceOCR_EN_FR.py
    from CodeSourceOCR_EN_FR import (
    EnhancedOCRPipeline,  # ‚Üê CORRIG√â: Nouveau nom
    OCRConfig, 
    create_optimized_config_for_lorem_ipsum,
    create_universal_config,  # ‚Üê AJOUT: Nouvelle fonction
    AdvancedImagePreprocessor,
    EnhancedOCREngine  # ‚Üê CORRIG√â: Nouveau nom
)
    print("‚úÖ Import du syst√®me OCR Enhanced r√©ussi")
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    print("V√©rifiez que le fichier CodeSourceOCR_EN_FR.py est dans le m√™me dossier")
    print("Et que toutes les d√©pendances sont install√©es:")
    print("pip install opencv-python pytesseract Pillow numpy matplotlib pdf2image python-Levenshtein tqdm easyocr")
    sys.exit(1)

def test_installation():
    """Test de l'installation des composants"""
    print("\nüß™ Test de l'installation...")
    
    components_ok = True
    
    try:
        import cv2
        print("‚úÖ OpenCV disponible")
    except ImportError:
        print("‚ùå OpenCV manquant")
        components_ok = False
    
    try:
        import pytesseract
        version = pytesseract.get_tesseract_version()
        print(f"‚úÖ Tesseract disponible (version: {version})")
    except Exception as e:
        print(f"‚ùå Probl√®me Tesseract: {e}")
        components_ok = False
    
    try:
        from pdf2image import convert_from_path
        print("‚úÖ pdf2image disponible")
    except ImportError:
        print("‚ùå pdf2image manquant")
        components_ok = False
    
    try:
        import easyocr
        print("‚úÖ EasyOCR disponible")
    except ImportError:
        print("‚ö†Ô∏è EasyOCR manquant (recommand√© mais optionnel)")
    
    try:
        import paddleocr
        # Test d'import complet pour √©viter l'erreur paddlex
        from paddleocr import PaddleOCR
        print("‚úÖ PaddleOCR disponible")
    except (ImportError, ModuleNotFoundError) as e:
        print(f"‚ö†Ô∏è PaddleOCR manquant ou incomplet ({e}) - optionnel")
    
    return components_ok

def test_ocr_simple():
    """Test OCR simple avec image de test"""
    print("\nüîç Test OCR simple...")
    
    try:
        import numpy as np
        import cv2
        
        # Cr√©ation d'une image de test simple avec "Lorem Ipsum"
        test_img = np.zeros((150, 500, 3), dtype=np.uint8)
        test_img.fill(255)  # Fond blanc
        
        # Ajout de texte de test
        cv2.putText(test_img, "Lorem Ipsum", (50, 60), 
                   cv2.FONT_HERSHEY_SIMPLEX, 1.2, (0, 0, 0), 2)
        cv2.putText(test_img, "dolor sit amet", (50, 100), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 0), 2)
        
        # Configuration optimis√©e pour le test
        config = create_optimized_config_for_lorem_ipsum()
        config.save_debug_images = False  # Pas de debug pour le test simple
        
        pipeline = EnhancedOCRPipeline(config)  # ‚Üê CORRIG√â: Nouveau nom
        
        results = pipeline._process_image_array(test_img, "test_simple")
        
        extracted_text = results.get('text', '').lower()
        
        if "lorem" in extracted_text and "ipsum" in extracted_text:
            print(f"‚úÖ Test OCR r√©ussi: '{results['text'].strip()}'")
            return True
        elif len(extracted_text.strip()) > 0:
            print(f"‚ö†Ô∏è Test OCR partiel: '{results['text'].strip()}'")
            print("Le texte est d√©tect√© mais peut n√©cessiter des ajustements")
            return True
        else:
            print(f"‚ùå Test OCR √©chou√©: texte vide")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test OCR: {e}")
        import traceback
        traceback.print_exc()
        return False

def process_lorem_ipsum_file():
    """Traitement principal du fichier lorem ipsum"""
    # Chemins possibles pour votre fichier
    possible_files = [
        r"C:\Users\bauer\Downloads\thaitest.jpeg",
        r"C:\Users\bauer\Downloads\lorem-ipsum-meaning-in-english-lipsumhub.jpg",
        r"C:\Users\bauer\Downloads\imtest.pdf",
        r"lorem_ipsum.jpg",
        r"imtest.pdf"
    ]
    
    file_path = None
    for path in possible_files:
        if os.path.exists(path):
            file_path = path
            break
    
    if not file_path:
        print("‚ùå Aucun fichier lorem ipsum trouv√© dans les chemins suivants:")
        for path in possible_files:
            print(f"   - {path}")
        print("\nVeuillez v√©rifier le chemin de votre fichier.")
        return False
    
    output_dir = r"C:\Users\bauer\Downloads\ocr_results_enhanced"
    
    print(f"\nüìÑ Traitement de: {file_path}")
    
    # Cr√©ation du dossier de sortie
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    try:
        # Configuration universelle adaptative
        config = OCRConfig(
            # Pr√©traitement adapt√© au tha√Ø
            enable_preprocessing=True,
            enable_deskewing=True,
            enable_denoising=True,
            enable_sharpening=False,  # Peut d√©grader les caract√®res tha√Ø
            enable_contrast_enhancement=True,
            enable_adaptive_threshold=True,
            scale_factor=3.0,  # R√©duit un peu
            
            # Configuration OCR pour tha√Ø uniquement
            language='tha',
            tesseract_config='--psm 3 -c preserve_interword_spaces=1',  # Pr√©serve les espaces
            confidence_threshold=1.0,  # Tr√®s tr√®s bas
            enable_auto_language_detection=False,
            
            # EasyOCR prioritaire pour le tha√Ø
            enable_fallback=True,
            fallback_engines=['easyocr'],
            max_retry_attempts=1,
            
            # Post-traitement totalement d√©sactiv√©
            enable_text_cleaning=False,
            enable_spell_correction=False,
            enable_entity_extraction=False,
            enable_structure_analysis=False,
            
            # Performance
            enable_caching=False,
            enable_parallel_processing=False,
            
            # Sortie avec debug
            save_json=True,
            save_visualization=True,
            save_debug_images=True,
            output_dir=output_dir
        )
        
        print("‚öôÔ∏è Configuration optimis√©e Lorem Ipsum:")
        print(f"   - Langues: {config.language}")
        print(f"   - Seuil confiance: {config.confidence_threshold}%")
        print(f"   - Facteur d'√©chelle: {config.scale_factor}x")
        print(f"   - Pr√©traitement: {'Activ√©' if config.enable_preprocessing else 'D√©sactiv√©'}")
        print(f"   - Fallback: {'Activ√©' if config.enable_fallback else 'D√©sactiv√©'}")
        print(f"   - Debug images: {'Activ√©' if config.save_debug_images else 'D√©sactiv√©'}")
        
        # Initialisation du pipeline
        pipeline = EnhancedOCRPipeline(config)  # ‚Üê CORRIG√â: Nouveau nom
        
        print("\nüöÄ D√©but du traitement...")
        
        # D√©terminer le type de fichier et traiter
        file_ext = Path(file_path).suffix.lower()
        
        if file_ext == '.pdf':
            print("üìÑ Traitement PDF...")
            results = pipeline.process_pdf_file(file_path)
        elif file_ext in ['.jpg', '.jpeg', '.png', '.tiff', '.bmp']:
            print("üñºÔ∏è Traitement image...")
            results = pipeline.process_image_file(file_path)
        else:
            print(f"‚ùå Format non support√©: {file_ext}")
            return False
        
        # Sauvegarde des r√©sultats
        output_name = f"lorem_ipsum_results_{Path(file_path).stem}"
        output_path = os.path.join(output_dir, output_name)
        pipeline.save_results_to_files(results, output_path)
        
        # Affichage des r√©sultats
        print("\n" + "="*70)
        print("üìä R√âSULTATS DU TRAITEMENT LOREM IPSUM")
        print("="*70)
        
        if results.get('success', False):
            print("‚úÖ Extraction r√©ussie!")
            
            # Informations de base
            processing_time = results.get('processing_time', 0)
            print(f"‚è±Ô∏è Temps de traitement: {processing_time:.2f} secondes")
            
            # Pour les PDFs
            if 'total_pages' in results:
                print(f"üìÑ Pages trait√©es: {results.get('successful_pages', 0)}/{results.get('total_pages', 0)}")
            
            # Statistiques de caract√®res et mots
            char_count = results.get('character_count', len(results.get('text', '')))
            word_count = results.get('word_count', len(results.get('text', '').split()))
            print(f"üìù Caract√®res extraits: {char_count}")
            print(f"üìù Mots extraits: {word_count}")
            
            # Confiance
            if 'confidence_metrics' in results:
                conf = results['confidence_metrics']
                avg_conf = conf.get('average', 0)
                min_conf = conf.get('minimum', 0)
                max_conf = conf.get('maximum', 0)
                print(f"üìä Confiance moyenne: {avg_conf:.1f}%")
                print(f"üìà Confiance min/max: {min_conf:.1f}% / {max_conf:.1f}%")
            
            # Performance des moteurs
            if 'engine_performance' in results:
                engine_perf = results['engine_performance']
                if engine_perf:
                    print(f"\nüîß PERFORMANCE DES MOTEURS:")
                    for engine, stats in engine_perf.items():
                        success_rate = stats.get('success_rate', 0)
                        attempts = stats.get('total_attempts', 0)
                        print(f"   {engine.capitalize()}: {success_rate:.1f}% ({attempts} tentatives)")
            
            # Analyse sp√©cifique Lorem Ipsum
            extracted_text = results.get('text', '').lower()
            lorem_words = ['lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetur', 'adipiscing', 'elit']
            found_words = [word for word in lorem_words if word in extracted_text]
            
            print(f"\nüéØ ANALYSE LOREM IPSUM:")
            print(f"   Mots Lorem d√©tect√©s: {len(found_words)}/{len(lorem_words)}")
            if found_words:
                print(f"   Mots trouv√©s: {', '.join(found_words)}")
            else:
                print("   ‚ö†Ô∏è Aucun mot Lorem Ipsum standard d√©tect√©")
            
            # Aper√ßu du texte
            full_text = results.get('text', '')
            if full_text:
                preview_length = 300
                preview = full_text[:preview_length]
                
                print(f"\nüìù TEXTE EXTRAIT ({len(full_text)} caract√®res total):")
                print("-" * 50)
                print(preview.strip())
                if len(full_text) > preview_length:
                    print("...")
                
                # Analyse des probl√®mes potentiels
                if "meaning" in full_text.lower() and "lorem" not in full_text.lower():
                    print("\nüö® PROBL√àME D√âTECT√â:")
                    print("   Le texte contient 'meaning' mais pas 'lorem'")
                    print("   Cela sugg√®re une mauvaise reconnaissance OCR")
                    print("   Essayez avec des param√®tres diff√©rents ou v√©rifiez la qualit√© de l'image")
                
            else:
                print("\n‚ö†Ô∏è Aucun texte extrait")
        else:
            print("‚ùå √âchec de l'extraction")
            error_msg = results.get('error', 'Erreur inconnue')
            print(f"üö´ Erreur: {error_msg}")
        
        # Localisation des fichiers de sortie
        print(f"\nüíæ FICHIERS DE SORTIE:")
        print(f"   üìÑ Texte: {output_path}.txt")
        if config.save_json:
            print(f"   üìã JSON: {output_path}.json")
        if config.save_debug_images:
            print(f"   üñºÔ∏è Images debug: {output_dir}/debug_images/")
        
        # Statistiques globales du pipeline
        global_stats = pipeline.get_global_statistics()
        if global_stats['files_processed'] > 0:
            print(f"\nüìä STATISTIQUES GLOBALES:")
            print(f"   Fichiers trait√©s: {global_stats['files_processed']}")
            print(f"   Taux de r√©ussite: {global_stats['success_rate']:.1f}%")
            print(f"   Caract√®res totaux: {global_stats['total_characters_extracted']}")
        
        print("\n" + "="*70)
        if results.get('success', False) and len(results.get('text', '').strip()) > 0:
            print("‚úÖ TRAITEMENT TERMIN√â AVEC SUCC√àS")
        else:
            print("‚ö†Ô∏è TRAITEMENT TERMIN√â AVEC PROBL√àMES")
        print("="*70)
        
        return results.get('success', False)
        
    except Exception as e:
        print(f"\n‚ùå ERREUR lors du traitement: {e}")
        print("\nConseils de d√©pannage:")
        print("1. V√©rifiez que Tesseract est install√© et configur√©")
        print("2. V√©rifiez que Poppler est install√© pour les PDFs")
        print("3. V√©rifiez que le fichier n'est pas corrompu")
        print("4. Essayez le mode debug pour voir les √©tapes de pr√©traitement")
        print("5. V√©rifiez la qualit√© de l'image source")
        
        import traceback
        print(f"\nD√©tails de l'erreur:")
        traceback.print_exc()
        
        return False

def diagnostic_avance():
    """Diagnostic avanc√© du syst√®me"""
    print("\nüî¨ DIAGNOSTIC AVANC√â DU SYST√àME")
    print("="*50)
    
    # Test des composants individuels
    try:
        from CodeSourceOCR_EN_FR import (
            TESSERACT_AVAILABLE, 
            EASYOCR_AVAILABLE, 
            PADDLEOCR_AVAILABLE, 
            POPPLER_PATH
        )
        
        print("üîß √âTAT DES COMPOSANTS:")
        print(f"   Tesseract: {'‚úÖ Disponible' if TESSERACT_AVAILABLE else '‚ùå Non disponible'}")
        print(f"   EasyOCR: {'‚úÖ Disponible' if EASYOCR_AVAILABLE else '‚ùå Non disponible'}")
        print(f"   PaddleOCR: {'‚úÖ Disponible' if PADDLEOCR_AVAILABLE else '‚ùå Non disponible'}")
        print(f"   Poppler: {'‚úÖ Disponible' if POPPLER_PATH else '‚ùå Non disponible'}")
        
        if POPPLER_PATH:
            print(f"   Chemin Poppler: {POPPLER_PATH}")
        
    except Exception as e:
        print(f"‚ùå Erreur diagnostic: {e}")
    
    # SUPPRIM√â: Test de qualit√© d'image car ImageQualityAssessment n'existe plus
    print(f"\nüìä TEST QUALIT√â D'IMAGE:")
    print("   Module de test de qualit√© non disponible dans cette version")

def main():
    """Fonction principale"""
    print("üöÄ SYST√àME OCR ENHANCED - TEST LOREM IPSUM")
    print("="*60)
    
    # Test de l'installation
    print("Phase 1: V√©rification des composants...")
    if not test_installation():
        print("\n‚ùå Installation incompl√®te. Veuillez installer les d√©pendances manquantes.")
        print("\nCommandes d'installation:")
        print("pip install opencv-python pytesseract Pillow numpy matplotlib")
        print("pip install pdf2image python-Levenshtein tqdm")
        print("pip install easyocr")
        return 1
    
    # Test OCR simple
    print("\nPhase 2: Test OCR basique...")
    if not test_ocr_simple():
        print("\n‚ùå Test OCR √©chou√©. V√©rifiez la configuration de Tesseract.")
        print("Assurez-vous que Tesseract est install√© et accessible.")
        return 1
    
    # Diagnostic avanc√©
    print("\nPhase 3: Diagnostic syst√®me...")
    diagnostic_avance()
    
    # Traitement du fichier principal
    print("\nPhase 4: Traitement du fichier Lorem Ipsum...")
    if process_lorem_ipsum_file():
        print("\nüéâ TOUS LES TESTS SONT R√âUSSIS!")
        print("Le syst√®me OCR Enhanced fonctionne correctement.")
        return 0
    else:
        print("\n‚ö†Ô∏è PROBL√àMES D√âTECT√âS LORS DU TRAITEMENT")
        print("Consultez les messages d'erreur ci-dessus pour le d√©pannage.")
        return 1

if __name__ == "__main__":
    try:
        exit_code = main()
        input("\nAppuyez sur Entr√©e pour fermer...")
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Traitement interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
        input("\nAppuyez sur Entr√©e pour fermer...")
        sys.exit(1)